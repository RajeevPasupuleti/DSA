
package com.dsa.list;

public class IntegerLinkedList {

	private IntegerNode head;
	private int size;

	public void addToFront(Integer value) {
		IntegerNode node = new IntegerNode(value);
		node.setNext(head);
		head = node;
		size++;
	}

	public IntegerNode removeFromFront() {
		if (isEmpty()) {
			return null;
		}

		IntegerNode removedNode = head;
		head = head.getNext();
		size--;
		removedNode.setNext(null);
		return removedNode;
	}

	public void insertSorted(Integer value) {
		IntegerNode node = new IntegerNode(value);
		IntegerNode current = head;
		if (head == null) {
			head = node;

		} else {
			while (current != null) {
				IntegerNode nextVal = current.getNext();
				if (current.getValue() >= value && current == head) {
					node.setNext(head);
					head = node;

				} else if (current.getValue() < value && (nextVal == null || nextVal.getValue() > value)) {
					current.setNext(node);
					node.setNext(nextVal);

				}
				current = nextVal;
			}
		}
		size++;
	}

	public int getSize() {
		return size;
	}

	public boolean isEmpty() {
		return head == null;
	}

	public void printList() {
		IntegerNode current = head;
		System.out.print("HEAD -> ");
		while (current != null) {
			System.out.print(current);
			System.out.print(" -> ");
			current = current.getNext();
		}
		System.out.println("null");
	}

}
